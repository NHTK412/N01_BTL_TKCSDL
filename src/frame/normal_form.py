import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from data_structures.functional_dependency import FD
from itertools import combinations

class NormalFormCheckerFrame(tk.Frame):

    def __init__(self, parent):
        super().__init__(parent)
        self.grid_rowconfigure(1, weight=1)
        self.grid_columnconfigure(0, weight=1)
        
        self.fd_set = []
        self.all_attributes = set()
        self.all_keys = []
        self.prime_attributes = set()
        self.non_prime_attributes = set()
        
        self.create_widgets()

    def create_widgets(self):
        """T·∫°o c√°c widget"""
        # Header Frame
        header_frame = tk.Frame(self, bg='#2c3e50', height=80)
        header_frame.grid(row=0, 
                          column=0, 
                          columnspan=2, 
                          sticky="ew", 
                          padx=10, 
                          pady=(10, 0))
        
        header_frame.grid_propagate(False)
        
        title_label = tk.Label(
            header_frame,
            text="üìä X√ÅC ƒê·ªäNH D·∫†NG CHU·∫®N C·ª¶A QUAN H·ªÜ",
            font=('Arial', 18, 'bold'),
            fg='white',
            bg='#2c3e50'
        )
        title_label.pack(expand=True)
        
        # Content Frame
        content_frame = tk.Frame(self, bg='#f0f0f0')
        content_frame.grid(row=1, 
                           column=0, 
                           columnspan=2, 
                           sticky="nsew", 
                           padx=10, 
                           pady=10)
        content_frame.columnconfigure(0, weight=1)
        content_frame.columnconfigure(1, weight=1)
        content_frame.rowconfigure(1, weight=1)
        
        # Control Panel
        control_frame = tk.Frame(content_frame, bg='#f0f0f0', height=100)
        control_frame.grid(row=0, 
                           column=0, 
                           columnspan=2, 
                           sticky="ew", 
                           pady=(0, 10))
        control_frame.grid_propagate(False)
        
        # Style cho button
        style = ttk.Style()
        style.configure(
            'Custom.TButton',
            font=('Arial', 11, 'bold'),
            padding=(15, 8)
        )
        
        # Frame cho file input
        file_frame = tk.Frame(control_frame, bg='#f0f0f0')
        file_frame.pack(side=tk.LEFT, padx=20, pady=10, fill='y')
        
        self.open_button = ttk.Button(
            file_frame,
            text="üìÇ Ch·ªçn File Quan H·ªá",
            style='Custom.TButton',
            command=self.open_file
        )
        self.open_button.pack(pady=(0, 5))
        
        self.file_label = tk.Label(
            file_frame,
            text="Ch∆∞a ch·ªçn file",
            font=('Arial', 9),
            fg='#7f8c8d',
            bg='#f0f0f0'
        )
        self.file_label.pack()
        
        # Button ki·ªÉm tra d·∫°ng chu·∫©n
        check_frame = tk.Frame(control_frame, bg='#f0f0f0')
        check_frame.pack(expand=True, fill='both')
        
        self.check_button = ttk.Button(
            check_frame,
            text="üìä Ki·ªÉm Tra D·∫°ng Chu·∫©n",
            style='Custom.TButton',
            command=self.check_normal_forms,
            state='disabled'
        )
        self.check_button.pack(expand=True, pady=20)
        
        # Label th·ªëng k√™
        self.stats_label = tk.Label(
            control_frame,
            text="",
            font=('Arial', 10, 'bold'),
            fg='#2c3e50',
            bg='#f0f0f0'
        )
        self.stats_label.pack(side=tk.RIGHT, padx=20, pady=10)
        
        # Left Panel - Th√¥ng tin c∆° b·∫£n
        left_frame = tk.LabelFrame(
            content_frame,
            text="üìù Th√¥ng Tin Quan H·ªá",
            font=('Arial', 11, 'bold'),
            fg='#34495e',
            bg='#f0f0f0',
            padx=10,
            pady=10
        )
        left_frame.grid(row=1, 
                        column=0, 
                        sticky="nsew", 
                        padx=(0, 5))
        left_frame.columnconfigure(0, weight=1)
        left_frame.rowconfigure(0, weight=1)
        
        # Text area cho th√¥ng tin c∆° b·∫£n
        self.info_text = tk.Text(
            left_frame,
            font=('Consolas', 10),
            wrap=tk.WORD,
            bg='#f8f9fa',
            relief=tk.FLAT,
            bd=1,
            padx=10,
            pady=10,
            state=tk.DISABLED
        )
        self.info_text.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbar cho info
        info_scroll = ttk.Scrollbar(left_frame, command=self.info_text.yview)
        info_scroll.grid(row=0, column=1, sticky="ns")
        self.info_text.config(yscrollcommand=info_scroll.set)
        
        # Right Panel - K·∫øt qu·∫£ ki·ªÉm tra d·∫°ng chu·∫©n
        right_frame = tk.LabelFrame(
            content_frame,
            text="üìä K·∫øt Qu·∫£ Ki·ªÉm Tra D·∫°ng Chu·∫©n",
            font=('Arial', 11, 'bold'),
            fg='#34495e',
            bg='#f0f0f0',
            padx=10,
            pady=10
        )
        right_frame.grid(row=1, column=1, sticky="nsew", padx=(5, 0))
        right_frame.columnconfigure(0, weight=1)
        right_frame.rowconfigure(0, weight=1)
        
        # Text area cho k·∫øt qu·∫£
        self.result_text = tk.Text(
            right_frame,
            font=('Consolas', 10),
            wrap=tk.WORD,
            bg='#fdf2e9',
            relief=tk.FLAT,
            bd=1,
            padx=10,
            pady=10,
            state=tk.DISABLED
        )
        self.result_text.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbar cho result
        result_scroll = ttk.Scrollbar(right_frame, command=self.result_text.yview)
        result_scroll.grid(row=0, column=1, sticky="ns")
        self.result_text.config(yscrollcommand=result_scroll.set)
        
    def open_file(self):
        """M·ªü v√† ƒë·ªçc file"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file quan h·ªá",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if not file_path:
            return
            
        try:
            filename = file_path.split('/')[-1]
            
            # X√≥a n·ªôi dung c≈©
            self.file_label.config(text=f"üìÑ {filename}", fg='#2c3e50')
            self.info_text.config(state=tk.NORMAL)
            self.info_text.delete(1.0, tk.END)
            self.fd_set.clear()
            self.all_attributes.clear()
            self.all_keys.clear()
            
            # ƒê·ªçc file
            with open(file_path, 'r', encoding='utf-8') as file:
                file_data = file.read().strip()
            
            if not file_data:
                messagebox.showwarning("C·∫£nh b√°o", "File r·ªóng!")
                return
            
            lines = file_data.split('\n')
            lines = [line.strip() for line in lines if line.strip()]
            
            if len(lines) < 2:
                messagebox.showwarning("C·∫£nh b√°o", "File ph·∫£i c√≥ √≠t nh·∫•t 2 d√≤ng!")
                return
            
            # D√≤ng ƒë·∫ßu ti√™n l√† t·∫≠p thu·ªôc t√≠nh
            relation_line = lines[0].strip()
            self.all_attributes = set(relation_line.replace(' ', ''))
            
            # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
            self.info_text.insert(tk.END, "TH√îNG TIN QUAN H·ªÜ\n")
            self.info_text.insert(tk.END, "=" * 40 + "\n\n")
            self.info_text.insert(tk.END, f"T·∫≠p thu·ªôc t√≠nh R = {{{', '.join(sorted(self.all_attributes))}}}\n")
            self.info_text.insert(tk.END, f"S·ªë thu·ªôc t√≠nh: {len(self.all_attributes)}\n\n")
            
            # C√°c d√≤ng ti·∫øp theo l√† ph·ª• thu·ªôc h√†m
            self.info_text.insert(tk.END, "T·∫¨P PH·ª§ THU·ªòC H√ÄM F:\n")
            self.info_text.insert(tk.END, "-" * 30 + "\n")
            
            fd_count = 0
            for i, line in enumerate(lines[1:], 1):
                line = line.strip()
                if not line:
                    continue
                
                fd = self.parse_fd_format(line)
                if fd:
                    self.fd_set.append(fd)
                    fd_count += 1
                    self.info_text.insert(tk.END, f"FD{fd_count}: {fd}\n")
            
            self.info_text.insert(tk.END, f"\nT·ªïng s·ªë FD: {fd_count}\n")
            self.info_text.config(state=tk.DISABLED)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i button
            if self.fd_set:
                self.check_button.config(state='normal')
            
            self.update_stats()
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ ƒë·ªçc {fd_count} ph·ª• thu·ªôc h√†m!")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")
    
    def parse_fd_format(self, line):
        """Ph√¢n t√≠ch ph·ª• thu·ªôc h√†m"""
        try:
            if '-' not in line:
                return None
            
            parts = line.split('-')
            if len(parts) != 2:
                return None
            
            lhs_part = parts[0].strip()
            rhs_part = parts[1].strip()
            
            lhs_attrs = set(lhs_part.split())
            rhs_attrs = set(rhs_part.split())
            
            if not lhs_attrs.union(rhs_attrs).issubset(self.all_attributes):
                return None
            
            return FD(lhs_attrs, rhs_attrs)
            
        except Exception:
            return None
    
    def update_stats(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        stats_text = f"FD: {len(self.fd_set)} | Thu·ªôc t√≠nh: {len(self.all_attributes)}"
        if self.all_keys:
            stats_text += f" | Kh√≥a: {len(self.all_keys)}"
        self.stats_label.config(text=stats_text)
    
    def check_normal_forms(self):
        """Ki·ªÉm tra c√°c d·∫°ng chu·∫©n"""
        if not self.fd_set or not self.all_attributes:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file tr∆∞·ªõc!")
            return
        
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        
        self.result_text.insert(tk.END, "KI·ªÇM TRA D·∫†NG CHU·∫®N C·ª¶A QUAN H·ªÜ\n")
        self.result_text.insert(tk.END, "=" * 50 + "\n\n")
        
        # T√¨m t·∫•t c·∫£ c√°c kh√≥a tr∆∞·ªõc
        self.find_all_keys()
        
        # X√°c ƒë·ªãnh thu·ªôc t√≠nh ch√≠nh v√† kh√¥ng ch√≠nh
        self.classify_attributes()
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ kh√≥a
        self.result_text.insert(tk.END, "TH√îNG TIN V·ªÄ KH√ìA:\n")
        self.result_text.insert(tk.END, "-" * 30 + "\n")
        
        if self.all_keys:
            for i, key in enumerate(self.all_keys, 1):
                self.result_text.insert(tk.END, f"Kh√≥a {i}: {{{', '.join(sorted(key))}}}\n")
        else:
            self.result_text.insert(tk.END, "Kh√¥ng t√¨m th·∫•y kh√≥a n√†o!\n")
        
        self.result_text.insert(tk.END, f"\nThu·ªôc t√≠nh ch√≠nh: {{{', '.join(sorted(self.prime_attributes))}}}\n")
        self.result_text.insert(tk.END, f"Thu·ªôc t√≠nh kh√¥ng ch√≠nh: {{{', '.join(sorted(self.non_prime_attributes))}}}\n\n")
        
        # Ki·ªÉm tra t·ª´ng d·∫°ng chu·∫©n
        is_1nf = self.check_1nf()
        is_2nf = self.check_2nf() if is_1nf else False
        is_3nf = self.check_3nf() if is_2nf else False
        is_bcnf = self.check_bcnf() if is_3nf else False
        
        # K·∫øt lu·∫≠n
        self.result_text.insert(tk.END, "K·∫æT LU·∫¨N:\n")
        self.result_text.insert(tk.END, "=" * 30 + "\n")
        
        if is_bcnf:
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n BCNF (Boyce-Codd)\n")
        elif is_3nf:
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 3NF (Third Normal Form)\n")
        elif is_2nf:
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 2NF (Second Normal Form)\n")
        elif is_1nf:
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 1NF (First Normal Form)\n")
        else:
            self.result_text.insert(tk.END, "‚ùå Quan h·ªá kh√¥ng ƒë·∫°t d·∫°ng chu·∫©n 1NF\n")
        
        self.result_text.config(state=tk.DISABLED)
        self.update_stats()
    
    def find_all_keys(self):
        """T√¨m t·∫•t c·∫£ c√°c kh√≥a"""
        all_subsets = []
        sorted_attrs = sorted(self.all_attributes)
        
        # Sinh t·∫•t c·∫£ c√°c t·∫≠p con
        for size in range(1, len(self.all_attributes) + 1):
            for subset in combinations(sorted_attrs, size):
                all_subsets.append(set(subset))
        
        # T√¨m si√™u kh√≥a
        superkey_candidates = []
        for subset in all_subsets:
            closure = self.compute_closure(subset)
            if closure == self.all_attributes:
                superkey_candidates.append(subset)
        
        # T√¨m kh√≥a t·ªëi thi·ªÉu
        keys = []
        superkey_candidates.sort(key=len)
        
        for candidate in superkey_candidates:
            is_minimal = True
            for existing_key in keys:
                if existing_key.issubset(candidate):
                    is_minimal = False
                    break
            if is_minimal:
                keys.append(candidate)
        
        self.all_keys = keys
    
    def classify_attributes(self):
        """Ph√¢n lo·∫°i thu·ªôc t√≠nh ch√≠nh v√† kh√¥ng ch√≠nh"""
        self.prime_attributes = set()
        
        # Thu·ªôc t√≠nh ch√≠nh l√† nh·ªØng thu·ªôc t√≠nh xu·∫•t hi·ªán trong √≠t nh·∫•t m·ªôt kh√≥a
        for key in self.all_keys:
            self.prime_attributes.update(key)
        
        self.non_prime_attributes = self.all_attributes - self.prime_attributes
    
    def check_1nf(self):
        """Ki·ªÉm tra d·∫°ng chu·∫©n 1NF"""
        self.result_text.insert(tk.END, "KI·ªÇM TRA 1NF (First Normal Form):\n")
        self.result_text.insert(tk.END, "-" * 40 + "\n")
        
        # Gi·∫£ ƒë·ªãnh quan h·ªá ƒë√£ ·ªü d·∫°ng 1NF (t·∫•t c·∫£ gi√° tr·ªã nguy√™n t·ª≠)
        self.result_text.insert(tk.END, "‚úÖ T·∫•t c·∫£ thu·ªôc t√≠nh c√≥ gi√° tr·ªã nguy√™n t·ª≠\n")
        self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 1NF\n\n")
        
        return True
    
    def check_2nf(self):
        """Ki·ªÉm tra d·∫°ng chu·∫©n 2NF"""
        self.result_text.insert(tk.END, "KI·ªÇM TRA 2NF (Second Normal Form):\n")
        self.result_text.insert(tk.END, "-" * 40 + "\n")
        
        self.result_text.insert(tk.END, "ƒêi·ªÅu ki·ªán: Kh√¥ng c√≥ thu·ªôc t√≠nh kh√¥ng ch√≠nh n√†o ph·ª• thu·ªôc m·ªôt ph·∫ßn v√†o kh√≥a\n\n")
        
        violations = []
        
        # Ki·ªÉm tra t·ª´ng FD
        for fd in self.fd_set:
            lhs = fd.getLhs()
            rhs = fd.getRhs()
            
            # Ki·ªÉm tra n·∫øu RHS ch·ª©a thu·ªôc t√≠nh kh√¥ng ch√≠nh
            non_prime_in_rhs = rhs.intersection(self.non_prime_attributes)
            if not non_prime_in_rhs:
                continue
            
            # Ki·ªÉm tra n·∫øu LHS l√† t·∫≠p con th·ª±c s·ª± c·ªßa m·ªôt kh√≥a n√†o ƒë√≥
            for key in self.all_keys:
                if lhs.issubset(key) and lhs != key:
                    violations.append((fd, key, non_prime_in_rhs))
                    break
        
        if violations:
            self.result_text.insert(tk.END, "‚ùå T√¨m th·∫•y c√°c vi ph·∫°m 2NF:\n")
            for fd, key, non_prime_attrs in violations:
                self.result_text.insert(tk.END, f"   - FD {fd}: {{{', '.join(sorted(non_prime_attrs))}}} ph·ª• thu·ªôc m·ªôt ph·∫ßn v√†o kh√≥a {{{', '.join(sorted(key))}}}\n")
            self.result_text.insert(tk.END, "‚ùå Quan h·ªá KH√îNG ƒë·∫°t d·∫°ng chu·∫©n 2NF\n\n")
            return False
        else:
            self.result_text.insert(tk.END, "‚úÖ Kh√¥ng c√≥ vi ph·∫°m 2NF\n")
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 2NF\n\n")
            return True
    
    def check_3nf(self):
        """Ki·ªÉm tra d·∫°ng chu·∫©n 3NF"""
        self.result_text.insert(tk.END, "KI·ªÇM TRA 3NF (Third Normal Form):\n")
        self.result_text.insert(tk.END, "-" * 40 + "\n")
        
        self.result_text.insert(tk.END, "ƒêi·ªÅu ki·ªán: Kh√¥ng c√≥ thu·ªôc t√≠nh kh√¥ng ch√≠nh n√†o ph·ª• thu·ªôc b·∫Øc c·∫ßu v√†o kh√≥a\n\n")
        
        violations = []
        
        # Ki·ªÉm tra t·ª´ng FD
        for fd in self.fd_set:
            lhs = fd.getLhs()
            rhs = fd.getRhs()
            
            # Ki·ªÉm tra n·∫øu RHS ch·ª©a thu·ªôc t√≠nh kh√¥ng ch√≠nh
            non_prime_in_rhs = rhs.intersection(self.non_prime_attributes)
            if not non_prime_in_rhs:
                continue
            
            # Ki·ªÉm tra n·∫øu LHS kh√¥ng ph·∫£i l√† si√™u kh√≥a v√† ch·ª©a thu·ªôc t√≠nh kh√¥ng ch√≠nh
            lhs_closure = self.compute_closure(lhs)
            is_superkey = lhs_closure == self.all_attributes
            
            if not is_superkey and lhs.intersection(self.non_prime_attributes):
                violations.append((fd, non_prime_in_rhs))
        
        if violations:
            self.result_text.insert(tk.END, "‚ùå T√¨m th·∫•y c√°c vi ph·∫°m 3NF:\n")
            for fd, non_prime_attrs in violations:
                self.result_text.insert(tk.END, f"   - FD {fd}: Ph·ª• thu·ªôc b·∫Øc c·∫ßu qua thu·ªôc t√≠nh kh√¥ng ch√≠nh\n")
            self.result_text.insert(tk.END, "‚ùå Quan h·ªá KH√îNG ƒë·∫°t d·∫°ng chu·∫©n 3NF\n\n")
            return False
        else:
            self.result_text.insert(tk.END, "‚úÖ Kh√¥ng c√≥ vi ph·∫°m 3NF\n")
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n 3NF\n\n")
            return True
    
    def check_bcnf(self):
        """Ki·ªÉm tra d·∫°ng chu·∫©n BCNF"""
        self.result_text.insert(tk.END, "KI·ªÇM TRA BCNF (Boyce-Codd Normal Form):\n")
        self.result_text.insert(tk.END, "-" * 45 + "\n")
        
        self.result_text.insert(tk.END, "ƒêi·ªÅu ki·ªán: V·ªõi m·ªçi FD X‚ÜíY, X ph·∫£i l√† si√™u kh√≥a\n\n")
        
        violations = []
        
        # Ki·ªÉm tra t·ª´ng FD
        for fd in self.fd_set:
            lhs = fd.getLhs()
            rhs = fd.getRhs()
            
            # T√≠nh bao ƒë√≥ng c·ªßa LHS
            lhs_closure = self.compute_closure(lhs)
            
            # Ki·ªÉm tra n·∫øu LHS kh√¥ng ph·∫£i l√† si√™u kh√≥a
            if lhs_closure != self.all_attributes:
                violations.append(fd)
        
        if violations:
            self.result_text.insert(tk.END, "‚ùå T√¨m th·∫•y c√°c vi ph·∫°m BCNF:\n")
            for fd in violations:
                self.result_text.insert(tk.END, f"   - FD {fd}: LHS kh√¥ng ph·∫£i l√† si√™u kh√≥a\n")
            self.result_text.insert(tk.END, "‚ùå Quan h·ªá KH√îNG ƒë·∫°t d·∫°ng chu·∫©n BCNF\n\n")
            return False
        else:
            self.result_text.insert(tk.END, "‚úÖ Kh√¥ng c√≥ vi ph·∫°m BCNF\n")
            self.result_text.insert(tk.END, "‚úÖ Quan h·ªá ƒë·∫°t d·∫°ng chu·∫©n BCNF\n\n")
            return True
    
    def compute_closure(self, attributes):
        """T√≠nh to√°n bao ƒë√≥ng c·ªßa m·ªôt t·∫≠p thu·ªôc t√≠nh"""
        closure = attributes.copy()
        changed = True
        
        while changed:
            changed = False
            for fd in self.fd_set:
                if fd.getLhs().issubset(closure):
                    before_size = len(closure)
                    closure = closure.union(fd.getRhs())
                    if len(closure) > before_size:
                        changed = True
        
        return closure